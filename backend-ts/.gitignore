node_modules/
logs/
build/
npm-debug.log
.idea/
.vscode
.DS_Store
.DS_Storage
.tmp
.yo-rc.json
.sass-cache
*.log
yarn-error.log
yarn.lock.cached
package-lock.json
.env
.env.dev
.env.prod
.env.homolog
junit.xml
.cache
.serverless
sdk/*

*.sc.ts

jobs/cpfl.js

credentials

terraform

src/config/config.homolog.json
src/config/config.prod.json
src/config/database.js
src/config/4dbff50adff5.json
src/config/homolog-env.sh
src/templates/contract/*.docx
src/templates/contract/*.docx#
!src/templates/contract/template-apt.docx
!src/templates/contract/template-kitnet.docx
jobs/clicksign/signatures.json
src/img/image.jpg-overlay.jpg

dont-commit*

scratch/*
release
bower_components
dist
lambda/**/*.js
lambda/.serverless
lambda/env.yml

postgres/dumps
postgres/dump.sh

_

/.blackbox/pubring.gpg~
/.blackbox/pubring.kbx~
/.blackbox/secring.gpg
/.env
.env.test

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log

# Ignore any .tfvars files that are generated automatically for each Terraform run. Most
# .tfvars files are managed as part of configuration and so should be included in
# version control.
#
# example.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

!*/sdk/package.json

ci/cloudflared/cert.pem

.npmrc
